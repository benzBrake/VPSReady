#!/bin/bash
###
# @Author: Ryan
# @Date: 2021-02-22 20:18:53
 # @LastEditTime: 2021-02-23 19:57:26
 # @LastEditors: Ryan
# @Description: Docker Nginx 管理脚本
 # @FilePath: \VPSReady\.utils\ngxman
# Mod From https://github.com/tahaHichri/nginxse-virtualhost-generator/blob/master/nginxse.sh
###
# Config Start #############################
NGXBaseDir="/data/web"
NGXCfgDir="${NGXBaseDir}/webconf"
NGXWebDir="${NGXBaseDir}/webapps"
NGXCrtDir="${NGXBaseDir}/webssls"
NGXExtDir="${NGXBaseDir}/nginx-extra"
NGXRwtDir="${NGXBaseDir}/nginx-rewrite"
NGXDisDir="${NGXBaseDir}/sites-available"
CMPFileDir="/data/docker-compose.yml"
# Config End ###############################

# OS destribution
DESPCN=$(lsb_release -si)

# Create Directory
[ ! -d "${NGXBaseDir}" ] && mkdir -p ${NGXBaseDir}
[ ! -d "${NGXCfgDir}" ] && mkdir -p ${NGXCfgDir}
[ ! -d "${NGXWebDir}" ] && mkdir -p ${NGXWebDir}
[ ! -d "${NGXCrtDir}" ] && mkdir -p ${NGXCrtDir}
[ ! -d "${NGXExtDir}" ] && mkdir -p ${NGXExtDir}
[ ! -d "${NGXRwtDir}" ] && mkdir -p ${NGXRwtDir}
[ ! -d "${NGXDisDir}" ] && mkdir -p ${NGXDisDir}

function prepareConf() {
  # Prepare fastcgi config
  if [ ! -f "${NGXExtDir}/fastcgi.conf" ]; then
    cat >"${NGXExtDir}/fastcgi.conf" <<EOF
fastcgi_param  SCRIPT_FILENAME    \$document_root\$fastcgi_script_name;
fastcgi_param  QUERY_STRING       \$query_string;
fastcgi_param  REQUEST_METHOD     \$request_method;
fastcgi_param  CONTENT_TYPE       \$content_type;
fastcgi_param  CONTENT_LENGTH     \$content_length;

fastcgi_param  SCRIPT_NAME        \$fastcgi_script_name;
fastcgi_param  REQUEST_URI        \$request_uri;
fastcgi_param  DOCUMENT_URI       \$document_uri;
fastcgi_param  DOCUMENT_ROOT      \$document_root;
fastcgi_param  SERVER_PROTOCOL    \$server_protocol;
fastcgi_param  REQUEST_SCHEME     \$scheme;
fastcgi_param  HTTPS              \$https if_not_empty;

fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx/\$nginx_version;

fastcgi_param  REMOTE_ADDR        \$remote_addr;
fastcgi_param  REMOTE_PORT        \$remote_port;
fastcgi_param  SERVER_ADDR        \$server_addr;
fastcgi_param  SERVER_PORT        \$server_port;
fastcgi_param  SERVER_NAME        \$server_name;

# PHP only, required if PHP was built with --enable-force-cgi-redirect
fastcgi_param  REDIRECT_STATUS    200;
fastcgi_param PHP_ADMIN_VALUE "open_basedir=\$document_root/:/tmp/:/proc/";
EOF
  fi
  # Prepare php enable config
  if [ ! -f "${NGXExtDir}/enable-php.conf" ]; then
    cat >"${NGXExtDir}/enable-php.conf" <<EOF
location ~ [^/]\.php(/|\$)
{
    fastcgi_pass  php:9000;
    fastcgi_index index.php;
    include ${NGXExtDir}/fastcgi.conf;
}
EOF
  fi

  # Prepare php pathinfo enable config
  if [ ! -f "${NGXExtDir}/pathinfo.conf" ]; then
    cat >"${NGXExtDir}/pathinfo.conf" <<EOF
fastcgi_split_path_info ^(.+?\.php)(/.*)\$;
set \$path_info \$fastcgi_path_info;
fastcgi_param PATH_INFO \$path_info;
fastcgi_param SCRIPT_NAME \$fastcgi_script_name;
fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;    
EOF
  fi
  if [ ! -f "${NGXExtDir}/enable-php-pathinfo.conf" ]; then
    cat >"${NGXExtDir}/enable-php-pathinfo.conf" <<EOF
location ~ [^/]\.php(/|\$)
{
    fastcgi_pass  php:9000;
    fastcgi_index index.php;
    include ${NGXExtDir}/fastcgi.conf;
    include ${NGXExtDir}/pathinfo.conf;
}
EOF
  fi

  # Prepare typecho rewrite rule
  # Typecho
  if [ ! -f "${NGXRwtDir}/typecho.conf" ]; then
    cat >${NGXRwtDir}/typecho.conf <<EOF
if (!-e \$request_filename) {
    rewrite ^(.*)\$ /index.php\$1 last;
}
EOF
  fi
  # WordPress
  if [ ! -f "${NGXRwtDir}/wordpress.conf" ]; then
    cat >${NGXRwtDir}/wordpress.conf <<EOF
location / {
    if (-f \$request_filename/index.html){
        rewrite (.*) \$1/index.html break;
    }
    if (-f \$request_filename/index.php){
        rewrite (.*) \$1/index.php;
    }
    if (!-f \$request_filename){
        rewrite (.*) /index.php;
    }
}
EOF
  fi
}

# display notice and call for check.
function landingNotice() {
  rows=$(tput lines)
  cols=$(tput cols)
  fallbackNotice="Welcome to HostMan on $DESPCN\n"
  middle_row=$((rows / 2))
  middle_col=$((cols / 2))
  tput clear
  tput cup $middle_row $middle_col
  tput bold
  echo -e "$fallbackNotice"
  echo -e "This script will help you manage NGINX Server Block config Files.\n"
  echo -e "This is a free, open-source software originally released by https://doufu.ru\n"
  echo -e "IMPORTANT: -The script WIL delete/modify any existing config files"
  echo -e "       -You will be promped before any steps will be made."
  tput sgr0
  tput cup "$(tput lines)" 0
}

function index() {
  clear
  landingNotice
  echo "Functions: "
  echo "1.Add Virtual Host"
  echo "2.Delete Virtual Host"
  echo "3.Enable Virtual Host"
  echo "4.Disable Virtual Host"
  echo "5.Check Nginx Conf"
  echo "6.Restart Nginx"
  echo "7.Re generate extra and rewrite conf"
  echo "Q.Exit"

  read -p "[S] Your Choice: " choice
  case "$choice" in
  1)
    addHost
    index
    ;;
  2)
    delHost
    index
    ;;
  3)
    enableHost
    index
    ;;
  4)
    disableHost
    index
    ;;
  5)
    checkConf
    index
    ;;
  6)
    restartNginx
    index
    ;;
  7)
    rm -rf ${NGXExtDir}/*.conf
    rm -rf ${NGXRwtDir}/*.conf
    prepareConf
    ;;
  q | Q)
    exit 0
    ;;
  *)
    anykeyNothing
    index
    ;;
  esac
}

function addHost() {
  # ask for server name
  read -p "[Q] Server name(s) (e.g., example.com or sub.example.com): " server_name
  if [ -f "${NGXCfgDir}/${server_name}.conf" ]; then
    read -p "[Q] Config file exists, replace? (y/N): " replace_flag
    case "${replace_flag}" in
    y | Y) echo -e "[I] OK! Config file will be replaced." ;;
    *) echo -e "[I] Nothing to do." && index ;;
    esac
  fi

  echo "[Q] Chosee your host type: "
  echo "1.normal(default)"
  echo "2.redirect"
  echo "3.proxy"
  read -p "[S] Your choice: " host_type
  [ -z "${host_type}" ] && host_type="1"
  case "${host_type}" in
  2)
    read -p "[Q] What website do you want to redirect to (eg.https://baidu.com): " redirect_url
    redirectblock="# Redirect to another site
    rewrite ^(.*)\$ ${redirect_url} \$1 permanent;"
    ;;
  3)
    read -p "[Q] What website do you want to proxy to (eg.https://baidu.com): " proxy_url
    proxyblock="# proxy to another site
    location / {
      proxy_pass ${proxy_url}\$request_uri;
      proxy_set_header Host \$http_host;
      proxy_buffers 256 4k;
      proxy_max_temp_file_size 0;
      proxy_connect_timeout 30;
      proxy_cache_valid 200 302 10m;
      proxy_cache_valid 301 1h;
      proxy_cache_valid any 1m;
    }"
    ;;
  1)
    read -p "[Q] Html files directory absolute path (default: ${NGXWebDir}/${server_name}): " server_root
    echo -e "[Q] Are you using PHP-FPM:\nPHP-FPM can be installed and set a default\nPHP-FPM is usually set in /etc/php-fpm.d/www.conf."
    read -p "[Q] Enable PHP Support? (Y/n): " php_support
    read -p "[Q] Enable Pathinfo Support? (Y/n): " pathinfo_support
    echo "[I] Support Rewrite Rules: "
    find "${NGXRwtDir}" -name "*.conf" | sed 's#.*/##' | sed "s#.conf##g"
    read -p "[Q] Choose your rewrite rules (Enter to skip or input the rewrite rule name)?: " rewrite_support

    # enable php support
    case "${php_support}" in
    n | N)
      indexblock="index index.html index.htm index.nginx-debian.html;"
      echo -p "[I] N is selected, Ignoring PHP"
    ;;
    *)
      indexblock="index index.php index.html index.htm index.nginx-debian.html;"
      case "${pathinfo_support}" in
      n | N)
        phpblock="# Enable php
    include ${NGXExtDir}/enable-php.conf;"
        ;;
      *)
        phpblock="# Enable php with pathinfo support
    include ${NGXExtDir}/enable-php-pathinfo.conf;"
        ;;
      esac
      ;;
    esac
    
    # set default document root
    [ -z "${server_root}" ] && server_root="${NGXWebDir}/${server_name}"
    rootblock="root ${server_root};
    ${indexblock}
    location / {
      try_files \$uri \$uri/ /index.php\$uri?\$query_string;
    }"

    # set rewrite rules
    if [ -z "${rewrite_support}" ]; then
      echo "[I] Rewrite rule not selected."
      rewriteblock="\n"
    else
      if [ -f "${NGXRwtDir}/${rewrite_support}.conf" ]; then
        rewriteblock="# Enable Rewrite
    include ${NGXRwtDir}/${rewrite_support}.conf;"
      else
        echo "[W] Rewrite rules not exists, skipped!"
        rewriteblock="\n"
      fi
    fi
    ;;
  *)
    anykeyNothing
    index
    ;;
  esac
  # detect ssl certificate
  if [ -f "${NGXCrtDir}/${server_name}.crt" ] && [ -f "${NGXCrtDir}/${server_name}.key" ]; then
    echo "[I] SSL certificate was detected. SSL will be configured."
    sslblock="#SSL Configuration
    listen 443 ssl;
    ssl_certificate ${NGXCrtDir}/${server_name}.crt;
    ssl_certificate_key ${NGXCrtDir}/${server_name}.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
    ssl_prefer_server_ciphers on;
    rewrite ^(.*)\$ https://\$host\$1 permanent;"
  else
    sslblock="\n"
  fi

  serverblock="
server {
    listen 80 ;
    listen [::]:80 ;
    server_name ${server_name};
    
    ${sslblock}
    ${rootblock}
    ${redirectblock}
    ${proxyblock}
    ${phpblock}
    ${rewriteblock}
}"

  echo -e "[S] Server block succesfully generated!
[I] You can save the generated configuration into a new (.conf) file
[I] Server block configuration file to create: '${NGXCfgDir}/${server_name}.conf'"
  read -p "[Q] Create and Save '${server_name}.conf'? (Y/n) if you choose 'N' the config will be displayed: " savefile

  case "$savefile" in
  n | N)
    echo -e "${serverblock}"
    anykey
    ;;
  *)
    echo -e "$serverblock" >"${NGXCfgDir}/${server_name}.conf"
    if [ -f "${NGXCfgDir}/${server_name}.conf" ]; then
      echo -e "[S] Replace complete.\n[success] ${NGXCfgDir}/${server_name}.conf has been successfully created!"
      checkAndRestart
    fi
    ;;
  esac
}

function delHost() {
  echo "[I] Installed hosts: "
  find "${NGXCfgDir}" -name "*.conf" | sed 's#.*/##' | sed "s#.conf##g"
  read -p "[Q] Choose the virtual host that you want to delete (Enter to skip)?: " delete_host
  if [ "$delete_host" = "" ]; then
    anykeyNothing
  else
    if [ -f "${NGXCfgDir}/${delete_host}.conf" ]; then
      if rm -f "${NGXCfgDir}/${delete_host}.conf"; then
        checkAndRestart
        anykey "[I] ${NGXCfgDir}/${delete_host}.conf was deleted."
      else
        anykey "[E] Cannot remove ${NGXCfgDir}/${delete_host}.conf."
        return 1
      fi
    else
      return 1
    fi
  fi
  index
}

function enableHost() {
  echo "[I] Current disabled hosts: "
  find "${NGXDisDir}" -name "*.conf" | sed 's#.*/##' | sed "s#.conf##g"
  read -p "[Q] Choose the virtual host that you want to enable (Enter to skip)?: " enable_host
  if [ "$enable_host" = "" ]; then
    anykeyNothing
  else
    if [ -f "${NGXDisDir}/${enable_host}.conf" ]; then
      if mv "${NGXDisDir}/${enable_host}.conf" "${NGXCfgDir}/${enable_host}.conf"; then
        checkAndRestart
        anykey "[I] ${enable_host}.conf was enabled."
        return 0
      else
        anykey "[E] Cannot enable ${enable_host}.conf."
        return 1
      fi
    else
      return 1
    fi
  fi
  index
}

function disableHost() {
  echo "[I] Current enabled hosts: "
  find "${NGXCfgDir}" -name "*.conf" | sed 's#.*/##' | sed "s#.conf##g"
  read -p "[Q] Choose the virtual host that you want disable (Enter to skip)?: " disable_host
  if [ "$disable_host" = "" ]; then
    anykeyNothing
  else
    if [ -f "${NGXCfgDir}/${disable_host}.conf" ]; then
      if mv "${NGXCfgDir}/${disable_host}.conf" "${NGXDisDir}/${disable_host}.conf"; then
        checkAndRestart
        anykey "[I] ${disable_host}.conf was disabled."
        return 0
      else
        anykey "[E] Cannot enable ${disable_host}.conf."
        return 1
      fi
    else
      return 1
    fi
  fi
  index
}

function checkConf() {
  echo -e "[I] Checking configuration files ..."
  docker-compose -f ${CMPFileDir} exec nginx nginx -t
  err=$?
  anykey
  return ${err}
}

function restartNginx() {
  echo -e "[I] Restarting nginx ..."
  docker-compose -f ${CMPFileDir} restart nginx
  err=$?
  anykey
  return ${err}
}

function checkAndRestart() {
  if checkConf; then
    echo "[I] Configuration seems to be ok. Nginx will be restarted."
    restartNginx
  else
    echo "[E] Configuration seems to be not ok."
  fi
}

function anykey() {
  read -p "${1-[I]} Press any key to confinue..."
}

function anykeyNothing() {
  anykey "[W] Choose nothing..."
}

index
